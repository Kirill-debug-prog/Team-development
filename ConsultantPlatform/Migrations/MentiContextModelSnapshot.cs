// <auto-generated />
using System;
using ConsultantPlatform.Models.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConsultantPlatform.Migrations
{
    [DbContext(typeof(MentiContext))]
    partial class MentiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id")
                        .HasName("Category_pkey");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ClientID");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uuid")
                        .HasColumnName("MentorID");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id")
                        .HasName("ChatRooms_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("MentorId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float>("DurationYears")
                        .HasColumnType("real");

                    b.Property<Guid>("MentorCardId")
                        .HasColumnType("uuid");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Experience_pkey");

                    b.HasIndex("MentorCardId");

                    b.ToTable("Experience", (string)null);
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.MentorCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uuid")
                        .HasColumnName("MentorID");

                    b.Property<decimal>("PricePerHours")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id")
                        .HasName("MentorCards_pkey");

                    b.HasIndex("MentorId");

                    b.ToTable("MentorCards");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.MentorCardsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoryID");

                    b.Property<Guid>("MentorCardId")
                        .HasColumnType("uuid")
                        .HasColumnName("MentorCardID");

                    b.HasKey("Id")
                        .HasName("MentorCards_Category_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MentorCardId");

                    b.ToTable("MentorCards_Category", (string)null);
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("ChatRoomID");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("SenderID");

                    b.HasKey("Id")
                        .HasName("Message_pkey");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.ChatRoom", b =>
                {
                    b.HasOne("ConsultantPlatform.Models.Entity.User", "Client")
                        .WithMany("ChatRoomClients")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("fk_chat_client");

                    b.HasOne("ConsultantPlatform.Models.Entity.User", "Mentor")
                        .WithMany("ChatRoomMentors")
                        .HasForeignKey("MentorId")
                        .IsRequired()
                        .HasConstraintName("fk_chat_mentor");

                    b.Navigation("Client");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.Experience", b =>
                {
                    b.HasOne("ConsultantPlatform.Models.Entity.MentorCard", "MentorCard")
                        .WithMany("Experiences")
                        .HasForeignKey("MentorCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Experience_MentorCard");

                    b.Navigation("MentorCard");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.MentorCard", b =>
                {
                    b.HasOne("ConsultantPlatform.Models.Entity.User", "Mentor")
                        .WithMany("MentorCards")
                        .HasForeignKey("MentorId")
                        .IsRequired()
                        .HasConstraintName("fk_mentor");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.MentorCardsCategory", b =>
                {
                    b.HasOne("ConsultantPlatform.Models.Entity.Category", "Category")
                        .WithMany("MentorCardsCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_category");

                    b.HasOne("ConsultantPlatform.Models.Entity.MentorCard", "MentorCard")
                        .WithMany("MentorCardsCategories")
                        .HasForeignKey("MentorCardId")
                        .IsRequired()
                        .HasConstraintName("fk_mentorcard");

                    b.Navigation("Category");

                    b.Navigation("MentorCard");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.Message", b =>
                {
                    b.HasOne("ConsultantPlatform.Models.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .IsRequired()
                        .HasConstraintName("fk_message_chatroom");

                    b.HasOne("ConsultantPlatform.Models.Entity.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("fk_message_sender");

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.Category", b =>
                {
                    b.Navigation("MentorCardsCategories");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.MentorCard", b =>
                {
                    b.Navigation("Experiences");

                    b.Navigation("MentorCardsCategories");
                });

            modelBuilder.Entity("ConsultantPlatform.Models.Entity.User", b =>
                {
                    b.Navigation("ChatRoomClients");

                    b.Navigation("ChatRoomMentors");

                    b.Navigation("MentorCards");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
